void get_heights(int v, int p, vector < vector < int > >& g, vector < int >& height, int h = 0) {
	height[v] = h;
	for (int to : g[v])
		if (to != p)
			get_heights(to, v, g, height, h + 1);
}


void get_subtree_sizes(int v, int p, vector < vector < int > >& g, vector < int >& st_size) {
	st_size[v] = 1;
	for (int to : g[v])
		if (to != p) {
			get_subtree_sizes(to, v, g, st_size);
			st_size[v] += st_size[to];
		}
}


void get_binary_ups(int v, int p, vector < vector < int > >& g, vector < vector < int > >& bin_up) {
	bin_up[0][v] = p;
	for (int degree = 1; degree < bin_up.size(); degree++) {
		bin_up[degree][v] = bin_up[degree - 1][bin_up[degree - 1][v]];
	}
	for (int to : g[v]) {
		if (to != p)
			get_binary_ups(to, v, g, bin_up);
	}
}


int up_vertex(int v, int h, vector < vector < int > >& bin_up) {
	for (int degree = 0; 1 << degree <= h; degree++) {
		if (h & (1 << degree))
			v = bin_up[degree][v];
	}
	return v;
}


int LCA(int u, int v, vector < int >& height, vector < vector < int > >& bin_up) {
	if (height[v] > height[u])
		swap(u, v);
	u = up_vertex(u, height[u] - height[v], bin_up);

	for (int degree = bin_up.size() - 1; degree >= 0; degree--) {
		if (bin_up[degree][u] != bin_up[degree][v]) {
			u = bin_up[degree][u];
			v = bin_up[degree][v];
		}
	}

	if (u != v)
		u = bin_up[0][u];
	return u;
}


int distanse(int u, int v, vector < int >& height, vector < vector < int > >& bin_up) {
	int lca = LCA(u, v, height, bin_up);
	return height[u] + height[v] - 2 * height[lca];
}


struct Node {
	Node* l = nullptr, * r = nullptr;
	int mx;

	Node(int x = 0) {
		mx = x;
	}

	Node unite(Node l, Node r) {
		mx = max(l.mx, r.mx);
		return *this;
	}

	void unite(Node* l, Node* r) {
		mx = 0;
		if (l != nullptr)
			mx = max(mx, l->mx);
		if (r != nullptr)
			mx = max(mx, r->mx);
	}
};

class CutTree {
public:
	CutTree(int size) {
		t.resize(1);
		sz = size;
	}

	CutTree(vector < long long > v) {
		t.resize(1);
		sz = v.size();
		for (int i = 0; i < sz; i++)
			update(i, v[i]);
	}


	int get_max(int l, int r, int start_id = 0) {
		return get_result(&t[start_id], 0, sz - 1, l, r).mx;
	}


	void update(int pos, int val, int start_id = 0) {
		update(&t[start_id], 0, sz - 1, pos, val);
	}

private:
	vector < Node > t;
	int sz;

	Node get_result(Node* v, int l, int r, int i, int j) {
		if (l == i && r == j)
			return *v;

		int md = (l + r) / 2;
		if (j <= md) {
			if (v->l == nullptr)
				v->l = new Node;
			return get_result(v->l, l, md, i, j);
		}
		else if (md < i) {
			if (v->r == nullptr)
				v->r = new Node;
			return get_result(v->r, md + 1, r, i, j);
		}
		else {
			if (v->l == nullptr)
				v->l = new Node;
			if (v->r == nullptr)
				v->r = new Node;
			return Node().unite(get_result(v->l, l, md, i, md), get_result(v->r, md + 1, r, md + 1, j));
		}
	}

	void update(Node* v, int l, int r, int pos, int val) {
		if (l == r) {
			*v = Node(val);
			return;
		}

		int md = (l + r) / 2;
		if (pos <= md) {
			if (v->l == nullptr)
				v->l = new Node;
			update(v->l, l, md, pos, val);
		}
		else {
			if (v->r == nullptr)
				v->r = new Node;
			update(v->r, md + 1, r, pos, val);
		}
		v->unite(v->l, v->r);
	}
};

struct pt {
	int path, pos;

	pt(int path = -1, int pos = -1) {
		this->path = path;
		this->pos = pos;
	}
};

void build_HLD(int v, int p, vector < vector < int > >& g, vector < int >& c, 
	vector < int >& st_size, vector < int >& up, vector < pt >& d, 
	vector < CutTree >& HLD, int upc, int path = 0, int pos = 0) {

	up[v] = upc;
	if (HLD.size() == path)
		HLD.push_back(CutTree(g.size()));
	HLD[path].update(pos, c[v]);
	d[v] = pt(path, pos);

	int next = -1;
	for (int to : g[v])
		if (to != p && (next == -1 || st_size[next] < st_size[to]))
			next = to;

	if (next == -1)
		return;

	build_HLD(next, v, g, c, st_size, up, d, HLD, upc, path, pos + 1);
	for (int to : g[v])
		if (to != p && to != next)
			build_HLD(to, v, g, c, st_size, up, d, HLD, to, HLD.size());
}

int search_max(int u, int v, vector < int >& up, vector < pt >& d, vector < CutTree >& HLD) {
	int res = 0;
	while (true) {
		if (d[u].path == d[v].path) {
			res = max(res, HLD[d[u].path].get_max(d[v].pos, d[u].pos));
			break;
		}
		else {
			res = max(res, HLD[d[u].path].get_max(0, d[u].pos));
			u = up[u];
		}
	}
	return res;
}


int find_centroid(int v, int p, vector < vector < int > >& g, vector < int >& st_size) {
	int mx = -1;
	bool centroid = true;
	for (int to : g[v]) {
		if (to != p) {
			centroid = centroid && st_size[to] <= g.size() / 2;
			if (mx == -1 || st_size[to] > st_size[mx])
				mx = to;
		}
	}

	if (centroid)
		return v;
	
	return find_centroid(mx, v, g, st_size);
}
