#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
const int INF = 1e9;
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	string s1, s2;
	int n;
 
	cin >> s1 >> s2 >> n;
 
	vector < vector < int > > g(26, vector < int >(26, INF));
	for (int i = 0; i < n; i++)
	{
		char c1, c2;
		int w;
		cin >> c1 >> c2 >> w;
		g[c1 - 'a'][c2 - 'a'] = min(g[c1 - 'a'][c2 - 'a'], w);
	}
 
	vector < vector < int > > d = g;
	for (int i = 0; i < 26; i++)
	{
		d[i][i] = 0;
	}
	for (int k = 0; k < 26; k++)
	{
		for (int i = 0; i < 26; i++)
		{
			for (int j = 0; j < 26; j++)
			{
				d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
			}
		}
	}
 
	if (s1.size() != s2.size())
	{
		cout << -1 << endl;
		return 0;
	}
 
	int cost = 0;
	for (int i = 0; i < s1.size(); i++)
	{
		int min_cost = -1, cm;
		for (int c = 0; c < 26; c++)
		{
			if (d[s1[i] - 'a'][c] == INF || d[s2[i] - 'a'][c] == INF)
			{
				continue;
			}
			if (min_cost == -1 || min_cost > d[s1[i] - 'a'][c] + d[s2[i] - 'a'][c])
			{
				min_cost = d[s1[i] - 'a'][c] + d[s2[i] - 'a'][c];
				cm = c;
			}
		}
		if (min_cost == -1)
		{
			cout << -1 << endl;
			return 0;
		}
		s1[i] = cm + 'a';
		s2[i] = cm + 'a';
		cost += min_cost;
	}
 
	cout << cost << endl;
	cout << s1 << endl;
	return 0;
}