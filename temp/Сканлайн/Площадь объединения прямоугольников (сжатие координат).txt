#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
using namespace std;
 
 
class node
{
public:
    long long mn, cnt, add;
 
    node(long long mn = -1, long long cnt = -1, long long add = 0)
    {
        this->mn = mn;
        this->cnt = cnt;
        this->add = add;
    }
 
    node unite(node a, node b)
    {
        mn = min(a.mn + a.add, b.mn + b.add);
 
        if (a.mn + a.add < b.mn + b.add)
        {
            cnt = a.cnt;
        }
        else if (a.mn + a.add > b.mn + b.add)
        {
            cnt = b.cnt;
        }
        else
        {
            cnt = a.cnt + b.cnt;
        }
 
        return *this;
    }
};
 
 
vector <node> t;
vector < int > a;
 
 
void build(int ind, int l, int r)
{
    if (l == r)
    {
        t[ind] = node(0, a[l]);
        return;
    }
 
    int md = (l + r) / 2;
    build(ind * 2, l, md);
    build(ind * 2 + 1, md + 1, r);
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
}
 
 
node get_min(int ind, int l, int r, int i, int j, long long sm = 0)
{
    if (l == i && r == j)
    {
        t[ind].add += sm;
        return t[ind];
    }
 
    sm += t[ind].add;
    t[ind].add = 0;
 
    int md = (l + r) / 2;
    node res;
    if (j <= md)
    {
        res = get_min(2 * ind, l, md, i, j, sm);
        t[2 * ind + 1].add += sm;
    }
    else if (i > md)
    {
        res = get_min(2 * ind + 1, md + 1, r, i, j, sm);
        t[2 * ind].add += sm;
    }
    else
    {
        res.unite(get_min(2 * ind, l, md, i, md, sm), get_min(2 * ind + 1, md + 1, r, md + 1, j, sm));
    }
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
    return res;
}
 
 
void change(int ind, int l, int r, int i, int j, long long value, long long sm = 0)
{
    if (l == i && r == j)
    {
        t[ind].add += sm + value;
        return;
    }
 
    sm += t[ind].add;
    t[ind].add = 0;
 
    int md = (l + r) / 2;
    if (j <= md)
    {
        change(2 * ind, l, md, i, j, value, sm);
        t[2 * ind + 1].add += sm;
    }
    else if (i > md)
    {
        change(2 * ind + 1, md + 1, r, i, j, value, sm);
        t[2 * ind].add += sm;
    }
    else
    {
        change(2 * ind, l, md, i, md, value, sm);
        change(2 * ind + 1, md + 1, r, md + 1, j, value, sm);
    }
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
}
 
 
class pt
{
public:
    int y, x1, x2, flag;
 
    pt(int y, int x1, int x2, int flag)
    {
        this->y = y;
        this->x1 = x1;
        this->x2 = x2;
        this->flag = flag;
    }
 
    bool operator <(pt other)
    {
        return y < other.y || y == other.y && flag > other.flag;
    }
};
 
 
int main()
{
    ios_base::sync_with_stdio(false);
    int n, x1, y1, x2, y2, xmn = 1000000000, xmx = -1000000000;
 
    cin >> n;
 
    if (n == 0)
    {
        cout << 0 << endl;
        return 0;
    }
 
    vector < pt > qy;
    vector < int > x;
    for (int i = 0; i < n; i++)
    {
        cin >> x1 >> y1 >> x2 >> y2;
        qy.push_back(pt(y1, x1, x2, 1));
        qy.push_back(pt(y2, x1, x2, -1));
        x.push_back(x1);
        x.push_back(x2);
        if (x1 < xmn)
        {
            xmn = x1;
        }
        if (x2 > xmx)
        {
            xmx = x2;
        }
    }
 
    sort(qy.begin(), qy.end());
    sort(x.begin(), x.end());
 
    a.resize(x.size() - 1);
    for (int i = 0; i < x.size() - 1; i++)
    {
        a[i] = x[i + 1] - x[i];
    }
 
    t.resize(a.size() * 4);
    build(1, 0, a.size() - 1);
 
    int lasty = -1000000000, width = 0;
    long long s = 0;
    for (auto e : qy)
    {
        s += (long long(e.y) - lasty) * width;
 
        int left, right;
        left = lower_bound(x.begin(), x.end(), e.x1) - x.begin();
        right = lower_bound(x.begin(), x.end(), e.x2) - x.begin() - 1;
 
        if (right >= left)
        {
            change(1, 0, a.size() - 1, left, right, e.flag);
        }
        node mn = get_min(1, 0, a.size() - 1, 0, a.size() - 1);
        if (mn.mn + mn.add != 0)
        {
            mn.cnt = 0;
        }
 
        lasty = e.y;
        width = xmx - xmn - mn.cnt;
    }
 
    cout << s << endl;
 
    return 0;
}