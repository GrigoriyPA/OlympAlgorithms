#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
using namespace std;
 
 
class node
{
public:
    long long mx, add, cr;
 
    node(long long mx = -1, long long cr = -1, long long add = 0)
    {
        this->mx = mx;
        this->cr = cr;
        this->add = add;
    }
 
    node unite(node a, node b)
    {
        mx = max(a.mx + a.add, b.mx + b.add);
        if (a.mx + a.add >= b.mx + b.add)
        {
            cr = a.cr;
        }
        else
        {
            cr = b.cr;
        }
 
        return *this;
    }
};
 
 
vector <node> t;
 
 
void build(int ind, int l, int r)
{
    if (l == r)
    {
        t[ind] = node(0, l);
        return;
    }
 
    int md = (l + r) / 2;
    build(ind * 2, l, md);
    build(ind * 2 + 1, md + 1, r);
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
}
 
 
node get_max(int ind, int l, int r, int i, int j, long long sm = 0)
{
    if (l == i && r == j)
    {
        t[ind].add += sm;
        return t[ind];
    }
 
    sm += t[ind].add;
    t[ind].add = 0;
 
    int md = (l + r) / 2;
    node res;
    if (j <= md)
    {
        res = get_max(2 * ind, l, md, i, j, sm);
        t[2 * ind + 1].add += sm;
    }
    else if (i > md)
    {
        res = get_max(2 * ind + 1, md + 1, r, i, j, sm);
        t[2 * ind].add += sm;
    }
    else
    {
        res.unite(get_max(2 * ind, l, md, i, md, sm), get_max(2 * ind + 1, md + 1, r, md + 1, j, sm));
    }
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
    return res;
}
 
 
void change(int ind, int l, int r, int i, int j, long long value, long long sm = 0)
{
    if (l == i && r == j)
    {
        t[ind].add += sm + value;
        return;
    }
 
    sm += t[ind].add;
    t[ind].add = 0;
 
    int md = (l + r) / 2;
    if (j <= md)
    {
        change(2 * ind, l, md, i, j, value, sm);
        t[2 * ind + 1].add += sm;
    }
    else if (i > md)
    {
        change(2 * ind + 1, md + 1, r, i, j, value, sm);
        t[2 * ind].add += sm;
    }
    else
    {
        change(2 * ind, l, md, i, md, value, sm);
        change(2 * ind + 1, md + 1, r, md + 1, j, value, sm);
    }
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
}
 
 
class pt
{
public:
    int y, x1, x2, flag;
 
    pt(int y, int x1, int x2, int flag)
    {
        this->y = y;
        this->x1 = x1;
        this->x2 = x2;
        this->flag = flag;
    }
 
    bool operator <(pt other)
    {
        return y < other.y || y == other.y && flag > other.flag;
    }
};
 
 
int main()
{
    ios_base::sync_with_stdio(false);
    int n, x1, y1, x2, y2, xmx = -1000000, ymx = -1000000, xmn = 1000000, ymn = 1000000, xadd = 0, yadd = 0;
 
    cin >> n;
 
    vector < pt > qy;
    vector < pair < pair < int, int >, pair < int, int > > > db;
    for (int i = 0; i < n; i++)
    {
        cin >> x1 >> y1 >> x2 >> y2;
        xmx = max(max(x1, x2), xmx);
        ymx = max(max(y1, y2), ymx);
        xmn = min(min(x1, x2), xmn);
        ymn = min(min(y1, y2), ymn);
        db.push_back(make_pair(make_pair(x1, y1), make_pair(x2, y2)));
    }
 
    if (xmn < 0)
    {
        xadd = -xmn;
        xmx += xadd;
        xmn = 0;
    }
    if (ymn < 0)
    {
        yadd = -ymn;
        ymx += yadd;
        ymn = 0;
    }
 
    for (int i = 0; i < n; i++)
    {
        qy.push_back(pt(db[i].first.second + yadd, db[i].first.first + xadd, db[i].second.first + xadd, 1));
        qy.push_back(pt(db[i].second.second + yadd, db[i].first.first + xadd, db[i].second.first + xadd, -1));
    }
 
    sort(qy.begin(), qy.end());
 
    t.resize((xmx + 1) * 4);
    build(1, 0, xmx);
 
    int ans = -1, xa, ya;
    for (auto e : qy)
    {
        change(1, 0, xmx, e.x1, e.x2, e.flag);
        node mx = get_max(1, 0, xmx, 0, xmx);
        if (mx.mx + mx.add > ans)
        {
            ans = mx.mx + mx.add;
            xa = mx.cr;
            ya = e.y;
        }
    }
 
    cout << ans << endl;
    cout << xa - xadd << " " << ya - yadd << endl;
 
    return 0;
}