#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;
 
 
class node
{
public:
    long long mx, add;
 
    node(long long mx = -1, long long add = 0)
    {
        this->mx = mx;
        this->add = add;
    }
 
    node unite(node a, node b)
    {
        mx = max(a.mx + a.add, b.mx + b.add);
 
        return *this;
    }
};
 
 
vector <node> t;
vector <int> a;
 
 
void build(int ind, int l, int r)
{
    if (l == r)
    {
        t[ind] = node(a[l]);
        return;
    }
 
    int md = (l + r) / 2;
    build(ind * 2, l, md);
    build(ind * 2 + 1, md + 1, r);
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
}
 
 
node get_max(int ind, int l, int r, int i, int j, long long sm = 0)
{
    if (l == i && r == j)
    {
        t[ind].add += sm;
        return t[ind];
    }
 
    sm += t[ind].add;
    t[ind].add = 0;
 
    int md = (l + r) / 2;
    node res;
    if (j <= md)
    {
        res = get_max(2 * ind, l, md, i, j, sm);
        t[2 * ind + 1].add += sm;
    }
    else if (i > md)
    {
        res = get_max(2 * ind + 1, md + 1, r, i, j, sm);
        t[2 * ind].add += sm;
    }
    else
    {
        res.unite(get_max(2 * ind, l, md, i, md, sm), get_max(2 * ind + 1, md + 1, r, md + 1, j, sm));
    }
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
    return res;
}
 
 
void change(int ind, int l, int r, int i, int j, long long value, long long sm = 0)
{
    if (l == i && r == j)
    {
        t[ind].add += sm + value;
        return;
    }
 
    sm += t[ind].add;
    t[ind].add = 0;
 
    int md = (l + r) / 2;
    if (j <= md)
    {
        change(2 * ind, l, md, i, j, value, sm);
        t[2 * ind + 1].add += sm;
    }
    else if (i > md)
    {
        change(2 * ind + 1, md + 1, r, i, j, value, sm);
        t[2 * ind].add += sm;
    }
    else
    {
        change(2 * ind, l, md, i, md, value, sm);
        change(2 * ind + 1, md + 1, r, md + 1, j, value, sm);
    }
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
}
 
 
int main()
{
    ios_base::sync_with_stdio(false);
    int n, m, l, r;
    char f;
 
    cin >> n;
 
    t.resize(4 * n);
    a.resize(n);
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }
    build(1, 0, n - 1);
 
    cin >> m;
    for (int i = 0; i < m; i++)
    {
        cin >> f >> l >> r;
        if (f == 'm')
        {
            node res = get_max(1, 0, n - 1, l - 1, r - 1);
            cout << res.mx + res.add << endl;
        }
        else
        {
            int add;
            cin >> add;
            change(1, 0, n - 1, l - 1, r - 1, add);
        }
    }
 
    return 0;
}