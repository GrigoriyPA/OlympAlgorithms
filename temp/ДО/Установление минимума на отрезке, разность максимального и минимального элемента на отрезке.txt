#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;
 
 
class node
{
public:
    int mn, mx, rating;
 
    node(int mn = 0, int mx = 0, int rating = 0)
    {
        this->mn = mn;
        this->mx = mx;
        this->rating = rating;
    }
 
    node unite(node a, node b)
    {
        mx = max(max(a.mx, a.rating), max(b.mx, b.rating));
        mn = min(max(a.mn, a.rating), max(b.mn, b.rating));
 
        return *this;
    }
};
 
 
vector <node> t;
vector <int> a;
 
 
void build(int ind, int l, int r)
{
    if (l == r)
    {
        t[ind] = node(a[l], a[l]);
        return;
    }
 
    int md = (l + r) / 2;
    build(ind * 2, l, md);
    build(ind * 2 + 1, md + 1, r);
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
}
 
 
node get_dif(int ind, int l, int r, int i, int j, int rate = 0)
{
    if (t[ind].rating >= rate)
    {
        rate = t[ind].rating;
    }
    else
    {
        t[ind].rating = rate;
    }
 
    if (l == i && r == j)
    {
        return t[ind];
    }
 
    int md = (l + r) / 2;
    node res;
    if (j <= md)
    {
        res = get_dif(2 * ind, l, md, i, j, rate);
        t[2 * ind + 1].rating = max(rate, t[2 * ind + 1].rating);
    }
    else if (i > md)
    {
        res = get_dif(2 * ind + 1, md + 1, r, i, j, rate);
        t[2 * ind].rating = max(t[ind].rating, t[2 * ind].rating);
    }
    else
    {
        res.unite(get_dif(2 * ind, l, md, i, md, rate), get_dif(2 * ind + 1, md + 1, r, md + 1, j, rate));
    }
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
    return res;
}
 
 
void change(int ind, int l, int r, int i, int j, int value, int rate = 0)
{
    if (t[ind].rating >= rate)
    {
        rate = t[ind].rating;
    }
    else
    {
        t[ind].rating = rate;
    }
 
    if (l == i && r == j)
    {
        t[ind].rating = max(t[ind].rating, value);
        return;
    }
 
    int md = (l + r) / 2;
    if (j <= md)
    {
        change(2 * ind, l, md, i, j, value, rate);
        t[2 * ind + 1].rating = max(rate, t[2 * ind + 1].rating);
    }
    else if (i > md)
    {
        change(2 * ind + 1, md + 1, r, i, j, value, rate);
        t[2 * ind].rating = max(rate, t[2 * ind].rating);
    }
    else
    {
        change(2 * ind, l, md, i, md, value, rate);
        change(2 * ind + 1, md + 1, r, md + 1, j, value, rate);
    }
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
}
 
 
int main()
{
    ios_base::sync_with_stdio(false);
    int n, m, l, r;
    string f;
 
    cin >> n;
 
    t.resize(4 * n);
    a.resize(n);
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }
    build(1, 0, n - 1);
 
    cin >> m;
    for (int i = 0; i < m; i++)
    {
        cin >> f >> l >> r;
        if (f == "ask")
        {
            node res = get_dif(1, 0, n - 1, l - 1, r - 1);
            cout << max(res.mx, res.rating) - max(res.mn, res.rating) << endl;
        }
        else
        {
            int val;
            cin >> val;
            change(1, 0, n - 1, l - 1, r - 1, val);
        }
    }
 
    return 0;
}