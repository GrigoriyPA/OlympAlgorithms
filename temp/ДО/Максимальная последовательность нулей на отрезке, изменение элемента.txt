#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;
 
 
class node
{
public:
    int mn, ln, rn, size;
 
    node(int mn = 0, int ln = 0, int rn = 0, int size = 1)
    {
        this->mn = mn;
        this->ln = ln;
        this->rn = rn;
        this->size = size;
    }
 
    node unite(node a, node b)
    {
        size = a.size + b.size;
 
        ln = a.ln;
        if (a.ln == a.size)
        {
            ln += b.ln;
        }
 
        rn = b.rn;
        if (b.rn == b.size)
        {
            rn += a.rn;
        }
 
        mn = max(max(max(a.mn, b.mn), max(ln, rn)), a.rn + b.ln);
 
        return *this;
    }
};
 
 
vector <node> t;
vector <int> a;
 
 
void build(int ind, int l, int r)
{
    if (l == r)
    {
        if (a[l] == 0)
        {
            t[ind] = node(1, 1, 1);
        }
        return;
    }
 
    int md = (l + r) / 2;
    build(ind * 2, l, md);
    build(ind * 2 + 1, md + 1, r);
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
}
 
 
node get_max(int ind, int l, int r, int i, int j)
{
    if (l == i && r == j)
    {
        return t[ind];
    }
 
    int md = (l + r) / 2;
    if (j <= md)
    {
        return get_max(2 * ind, l, md, i, j);
    }
    else if (i > md)
    {
        return get_max(2 * ind + 1, md + 1, r, i, j);
    }
    else
    {
        return node().unite(get_max(2 * ind, l, md, i, md), get_max(2 * ind + 1, md + 1, r, md + 1, j));
    }
}
 
 
void set_it(int ind, int l, int r, int i, int value)
{
    if (l == r)
    {
        a[l] = value;
        if (a[l] == 0)
        {
            t[ind] = node(1, 1, 1);
        }
        else
        {
            t[ind] = node();
        }
        return;
    }
 
    int md = (l + r) / 2;
    if (i <= md)
    {
        set_it(2 * ind, l, md, i, value);
    }
    else
    {
        set_it(2 * ind + 1, md + 1, r, i, value);
    }
 
    t[ind].unite(t[2 * ind], t[2 * ind + 1]);
}
 
 
int main()
{
    ios_base::sync_with_stdio(false);
    int n, m, l, r;
    string f;
 
    cin >> n;
 
    t.resize(4 * n);
    a.resize(n);
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }
    build(1, 0, n - 1);
 
    cin >> m;
    for (int i = 0; i < m; i++)
    {
        cin >> f >> l >> r;
        if (f == "QUERY")
        {
            cout << get_max(1, 0, n - 1, l - 1, r - 1).mn << endl;
        }
        else
        {
            set_it(1, 0, n - 1, l - 1, r);
        }
    }
 
    return 0;
}