#include <iostream>
#include <vector>
using namespace std;
 
 
vector <pair<int, int>> t;
vector <int> a;
 
 
pair < int, int > max(pair < int, int > a, pair < int, int > b)
{
    if (a.first >= b.first)
    {
        return a;
    }
    return b;
}
 
 
void build(int ind, int l, int r)
{
    if (l == r)
    {
        t[ind] = make_pair(a[l], l);
        return;
    }
 
    int md = (l + r) / 2;
    build(ind * 2, l, md);
    build(ind * 2 + 1, md + 1, r);
 
    t[ind] = max(t[2 * ind], t[2 * ind + 1]);
}
 
 
pair < int, int > get_max(int ind, int l, int r, int i, int j)
{
    if (l == i && r == j)
    {
        return t[ind];
    }
 
    int md = (l + r) / 2;
    if (j <= md)
    {
        return get_max(2 * ind, l, md, i, j);
    }
    else if (i > md)
    {
        return get_max(2 * ind + 1, md + 1, r, i, j);
    }
    else
    {
        return max(get_max(2 * ind, l, md, i, md), get_max(2 * ind + 1, md + 1, r, md + 1, j));
    }
}
 
 
int main()
{
    ios_base::sync_with_stdio(false);
    int n, k, l, r;
 
    cin >> n;
 
    t.resize(4 * n);
    a.resize(n);
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }
    build(1, 0, n - 1);
 
    cin >> k;
    for (int i = 0; i < k; i++)
    {
        cin >> l >> r;
        cout << get_max(1, 0, n - 1, l - 1, r - 1).second + 1 << endl;
    }
 
    return 0;
}