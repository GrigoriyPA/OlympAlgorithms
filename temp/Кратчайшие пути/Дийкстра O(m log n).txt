#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
struct rib
{
	int to, w;
 
	rib(int to, int w)
	{
		this->to = to;
		this->w = w;
	}
};
 
 
vector < long long > dijkstra(int s, vector < vector < rib > >& g)
{
	const long long INF = 1e18;
 
	vector < long long > d(g.size(), INF);
	d[s] = 0;
 
	set < pair < long long, int > > q;
	q.insert(make_pair(0, s));
 
	while (!q.empty())
	{
		int v = q.begin()->second;
		q.erase(q.begin());
 
		for (rib r : g[v])
		{
			if (d[r.to] > d[v] + r.w)
			{
				q.erase(make_pair(d[r.to], r.to));
				d[r.to] = d[v] + r.w;
				q.insert(make_pair(d[r.to], r.to));
			}
		}
	}
 
	return d;
}
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	int n, m;
 
	cin >> n >> m;
 
	vector < vector < rib > > g(n);
	for (int i = 0; i < m; i++)
	{
		int b, e, w;
		cin >> b >> e >> w;
 
		g[b - 1].push_back(rib(e - 1, w));
		g[e - 1].push_back(rib(b - 1, w));
	}
 
	vector < long long > d = dijkstra(0, g);
 
	for (long long el : d)
	{
		cout << el << " ";
	}
	cout << endl;
 
	return 0;
}