#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
struct rib
{
	int to, w, id;
 
	rib(int to = -1, int w = -1, int id = -1)
	{
		this->to = to;
		this->w = w;
		this->id = id;
	}
};
 
 
vector < long long > dijkstra(int s, vector < vector < rib > >& g)
{
	const long long INF = 1e18;
 
	vector < long long > d(g.size(), INF);
	d[s] = 0;
 
	vector < int > p(g.size());
	p[s] = -1;
 
	set < pair < long long, int > > q;
	q.insert(make_pair(0, s));
 
	while (!q.empty())
	{
		int v = q.begin()->second;
		q.erase(q.begin());
 
		for (rib r : g[v])
		{
			if (d[r.to] > d[v] + r.w)
			{
				q.erase(make_pair(d[r.to], r.to));
				d[r.to] = d[v] + r.w;
				p[r.to] = v;
				q.insert(make_pair(d[r.to], r.to));
			}
		}
	}
 
	return d;
}
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	int n, m, k;
 
	cin >> n >> m >> k;
 
	vector < pair < int, int > > edges;
	vector < vector < rib > > g(n);
	for (int i = 0; i < m; i++)
	{
		int x, y, w;
		cin >> x >> y >> w;
 
		edges.push_back(make_pair(x - 1, y - 1));
 
		g[x - 1].push_back(rib(y - 1, w, i));
		g[y - 1].push_back(rib(x - 1, w, i));
	}
 
	vector < pair < int, int > > paths(k);
	vector < pair < vector < long long >, vector < long long > > > dist(k);
	for (int i = 0; i < k; i++)
	{
		cin >> paths[i].first >> paths[i].second;
		paths[i].first--;
		paths[i].second--;
 
		dist[i].first = dijkstra(paths[i].first, g);
		dist[i].second = dijkstra(paths[i].second, g);
	}
	
	long long ans = -1;
	for (int i = 0; i < m; i++)
	{
		int x = edges[i].first, y = edges[i].second;
		long long cost = 0;
		for (int j = 0; j < k; j++)
		{
			cost += min(min(dist[j].first[y] + dist[j].second[x], dist[j].first[x] + dist[j].second[y]), dist[j].first[paths[j].second]);
		}
		if (ans == -1 || ans > cost)
		{
			ans = cost;
		}
	}
 
	cout << ans << endl;
 
	return 0;
}