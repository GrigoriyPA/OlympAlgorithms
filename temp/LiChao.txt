class Line {
public:
    long long k, b;

    Line(long long k = 0, long long b = 0) {
        this->k = k;
        this->b = b;
    }

    long long calc(long long x) {
        return k * x + b;
    }
};


struct Node {
    Line line;

    Node(Line line  = Line()) {
        this->line = line;
    }
};


class LiChao {
public:
    LiChao(int size) {
        sz = size;
        t.resize(4 * sz);
    }


    int get_min(int pos) {
        return get_result(1, 0, sz - 1, pos);
    }


    void add_line(Line line) {
        add_line(1, 0, sz - 1, line);
    }

private:
    vector < Node > t;
    int sz;

    long long get_result(int v, int l, int r, int pos) {
        int md = (l + r) / 2;
        if (md == pos)
            return t[v].line.calc(pos);
        
        long long res;
        if (pos < md)
            res = get_result(2 * v, l, md, pos);
        else
            res = get_result(2 * v + 1, md + 1, r, pos);
        res = min(res, t[v].line.calc(pos));
        return res;
    }

    void add_line(int v, int l, int r, Line line) {
        int md = (l + r) / 2;
        long long y_md_cur = t[v].line.calc(md), y_md_new = line.calc(md);
        long long y_l_cur = t[v].line.calc(l), y_l_new = line.calc(l);

        if (y_md_cur > y_md_new)
            swap(t[v].line, line);

        if (l == r)
            return;

        if (y_md_cur > y_md_new && y_l_cur <= y_l_new || y_md_cur <= y_md_new && y_l_cur >= y_l_new)
            add_line(2 * v, l, md, line);
        else
            add_line(2 * v + 1, md + 1, r, line);
    }
};