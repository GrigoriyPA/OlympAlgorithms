#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
 
 
long long get_sum(int p, vector < long long >& t)
{
    long long res = 0;
    for (int i = p; i >= 0; i = (i & (i + 1)) - 1)
    {
        res += t[i];
    }
    return res;
}
 
 
void change(int i, long long add, vector < long long >& t)
{
    for (int j = i; j < t.size(); j = (j | (j + 1)))
    {
        t[j] += add;
    }
}
 
 
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    int n, k, x;
 
    cin >> n >> k;
    k++;
 
    vector < pair < int, int > > a(n);
    for (int i = 0; i < n; i++)
    {
        cin >> x;
        a[i] = make_pair(x, i);
    }
 
    sort(a.begin(), a.end());
 
    vector < int > q(n);
    for (int i = 0; i < n; i++)
    {
        q[a[i].second] = i + 1;
    }
 
    vector < vector < long long > > dp(12, vector < long long >(n + 1, 0));
    change(0, 1, dp[0]);
    for (int i = 0; i < n; i++)
    {
        for (int j = 1; j <= k; j++)
        {
            change(q[i], get_sum(q[i] - 1, dp[j - 1]), dp[j]);
        }
    }
 
    cout << get_sum(n, dp[k]) << endl;
 
    return 0;
}