#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
 
 
vector < vector < int > > st;
vector < int > lg;
vector < int > a;
int n;
 
 
void build()
{
    for (int j = 0; j <= lg[n]; j++)
    {
        for (int i = 0; i <= n - (1 << j); i++)
        {
            if (j == 0)
            {
                st[j][i] = a[i];
            }
            else
            {
                st[j][i] = max(st[j - 1][i], st[j - 1][i + (1 << (j - 1))]);
            }
        }
    }
}
 
 
int get_max(int l, int r)
{
    if (l > r)
    {
        swap(l, r);
    }
    int j = lg[r - l + 1];
    return max(st[j][l], st[j][r - (1 << j) + 1]);
}
 
 
inline int get_ans(int k, int x)
{
    int l = k;
    for (int j = lg[n]; j >= 0; --j)
    {
        if (st[j][l] < x && l + (1 << j) < n)
        {
            l += 1 << j;
        }
    }
 
    if (a[l] < x)
    {
        l = n;
    }
 
    return l + 1;
}
 
 
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    int m;
 
    cin >> n >> m;
 
    lg.resize(n + 1, 0);
    for (int i = 2; i <= n; i++)
    {
        lg[i] = lg[i / 2] + 1;
    }
 
    st.resize(lg[n] + 1);
    for (int i = 0; i <= lg[n]; i++)
    {
        st[i].resize(n, 0);
    }
 
    a.resize(n);
    cin >> a[0];
    for (int i = 1; i < n; i++)
    {
        a[i] = (23 * a[i - 1] + 21563) % n + 1;
    }
 
    build();
 
    int k, x;
    cin >> k >> x;
    int ans = get_ans(k - 1, x);
 
    for (int i = 1; i < m; i++)
    {
        k = (17 * k + 751 + ans + 2 * i) % n + 1;
        x = (13 * x + 593 + ans + 5 * i) % n + 1;
        ans = get_ans(k - 1, x);
    }
 
    cout << k << " " << x << " " << ans << endl;
 
    return 0;
}