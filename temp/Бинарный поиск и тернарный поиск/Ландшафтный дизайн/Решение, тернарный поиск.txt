#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
 
 
double fi = 2 / (sqrt(5) + 1);
int k;
vector < int > c;
 
 
long long get_dist1(int h)
{
	long long ans = 0;
	for (int i = 0; i < c.size(); i++)
	{
		if (i % 2)
		{
			ans += abs(c[i] - (h - k));
		}
		else
		{
			ans += abs(c[i] - h);
		}
	}
 
	return ans;
}
 
 
long long get_dist2(int h)
{
	long long ans = 0;
	for (int i = 0; i < c.size(); i++)
	{
		if (i % 2)
		{
			ans += abs(c[i] - h);
		}
		else
		{
			ans += abs(c[i] - (h - k));
		}
	}
 
	return ans;
}
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cout.precision(15);
	int n;
 
	cin >> n >> k;
 
	c.resize(n);
	for (int i = 0; i < n; i++)
	{
		cin >> c[i];
	}
 
	int l = -1000000100, r = 1000000100;
	for (int i = 0; i < 200; i++)
	{
		int m1 = l + (r - l) / 3, m2 = r - (r - l) / 3;
		if (get_dist1(m1) > get_dist1(m2))
		{
			l = m1;
		}
		else
		{
			r = m2;
		}
	}
 
	long long ans1 = min(min(get_dist1(l), get_dist1(r)), get_dist1((l + r) / 2));
 
	l = -1000000100;
	r = 1000000100;
	for (int i = 0; i < 200; i++)
	{
		int m1 = l + (r - l) / 3, m2 = r - (r - l) / 3;
		if (get_dist2(m1) > get_dist2(m2))
		{
			l = m1;
		}
		else
		{
			r = m2;
		}
	}
 
	long long ans2 = min(min(get_dist2(l), get_dist2(r)), get_dist2((l + r) / 2));
 
	cout << min(ans1, ans2) << endl;
 
	return 0;
}
