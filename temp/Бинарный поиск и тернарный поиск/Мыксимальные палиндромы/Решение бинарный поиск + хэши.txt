#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
 
 
const int M = 1000000007, p = 107;
int n;
vector < long long > pw;
 
 
inline long long get(int l, int r, vector < long long >& H)
{
    long long hp = ((H[r] - H[l - 1]) * pw[n - r]) % M;
    if (hp < 0)
    {
        return hp + M;
    }
    return hp;
}
 
 
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    string s;
 
    cin >> s;
 
    n = s.length();
    pw.resize(n, 1);
    for (int i = 1; i < n; i++)
    {
        pw[i] = (pw[i - 1] * p) % M;
    }
 
    vector < long long > h(n + 1, 0);
    for (int i = 1; i <= n; i++)
    {
        h[i] = ((s[i - 1] - 'A' + 1) * pw[i - 1] + h[i - 1]) % M;
    }
 
    vector < long long > hr(n + 1, 0);
    for (int i = 1; i <= n; i++)
    {
        hr[i] = ((s[n - i] - 'A' + 1) * pw[i - 1] + hr[i - 1]) % M;
    }
 
    vector < int > ans(n);
    for (int i = 0; i < n; i++)
    {
        int l = 1, r = min(i + 1, n - i);
 
        if (get(i - r + 1 + 1, i + 1, h) == get(n - 1 - (i + r - 1) + 1, n - 1 - i + 1, hr))
        {
            ans[i] = r * 2 - 1;
        }
        else
        {
            while (r - l > 1)
            {
                int md = (l + r) / 2;
 
                if (get(i - md + 1 + 1, i + 1, h) == get(n - 1 - (i + md - 1) + 1, n - 1 - i + 1, hr))
                {
                    l = md;
                }
                else
                {
                    r = md;
                }
            }
            ans[i] = l * 2 - 1;
        }
    }
 
    for (int el : ans)
    {
        cout << el << " ";
    }
    cout << endl;
 
    return 0;
}