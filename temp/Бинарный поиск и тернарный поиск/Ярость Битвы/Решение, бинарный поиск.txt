#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
 
 
long long p, q;
vector < long long > c;
 
 
bool get_dist(long long k)
{
	vector < long long > tmp = c;
	for (int i = 0; i < tmp.size(); i++)
	{
		tmp[i] -= k * q;
	}
 
	for (int i = 0; i < tmp.size(); i++)
	{
		if (tmp[i] > 0)
		{
			if (p == q)
			{
				return false;
			}
 
			k -= (tmp[i] - 1) / (p - q) + 1;
		}
		if (k < 0)
		{
			return false;
		}
	}
	return true;
}
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cout.precision(15);
	int n;
 
	cin >> n >> p >> q;
 
	c.resize(n);
	for (int i = 0; i < n; i++)
	{
		cin >> c[i];
	}
 
	long long l = 0, r = 2000000100;
	while (r - l > 1)
	{
		long long md = (l + r) / 2;
 
		if (get_dist(md))
		{
			r = md;
		}
		else
		{
			l = md;
		}
	}
 
	cout << r << endl;
 
	return 0;
}