#include <iostream>
#include <string>
#include <vector>
#include <set>
using namespace std;
 
 
const int M = 1000000007, Md = 1000000009, p = 31;
int n;
vector < long long > pw;
vector < long long > h;
 
vector < long long > pwd;
vector < long long > hd;
 
 
inline pair < long long, long long > get(int l, int r)
{
    long long hp = ((h[r] - h[l - 1]) * pw[n - r]) % M;
    if (hp < 0)
    {
        hp += M;
    }
    long long hpd = ((hd[r] - hd[l - 1]) * pwd[n - r]) % Md;
    if (hpd < 0)
    {
        hpd += Md;
    }
    return make_pair(hp, hpd);
}
 
 
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    string s;
 
    cin >> s;
 
    n = s.length();
    pw.resize(n, 1);
    for (int i = 1; i < n; i++)
    {
        pw[i] = (pw[i - 1] * p) % M;
    }
 
    pwd.resize(n, 1);
    for (int i = 1; i < n; i++)
    {
        pwd[i] = (pwd[i - 1] * p) % Md;
    }
 
    h.resize(n + 1, 0);
    for (int i = 1; i <= n; i++)
    {
        h[i] = ((s[i - 1] - 'a' + 1) * pw[i - 1] + h[i - 1]) % M;
    }
 
    hd.resize(n + 1, 0);
    for (int i = 1; i <= n; i++)
    {
        hd[i] = ((s[i - 1] - 'a' + 1) * pwd[i - 1] + hd[i - 1]) % Md;
    }
 
    string t;
    cin >> t;
 
    int k;
    cin >> k;
 
    vector < vector < int > > dp(n);
    for (int i = 0; i < n; i++)
    {
        dp[i].resize(n, 0);
    }
 
    int ans = 0;
    set < pair < long long, long long > > se;
    for (int len = 1; len <= n; len++)
    {
        for (int l = 0; l <= n - len; l++)
        {
            int r = l + len - 1;
 
            if (len == 1)
            {
                if (t[s[l] - 'a'] == '1')
                {
                    dp[l][r] = 0;
                }
                else
                {
                    dp[l][r] = 1;
                }
            }
            else
            {
                if (t[s[l] - 'a'] == '1')
                {
                    dp[l][r] = dp[l + 1][r];
                }
                else
                {
                    dp[l][r] = dp[l + 1][r] + 1;
                }
            }
            if (dp[l][r] <= k)
            {
                se.insert(get(l + 1, r + 1));
            }
        }
        ans += se.size();
        se.clear();
    }
 
    cout << ans << endl;
 
    return 0;
}