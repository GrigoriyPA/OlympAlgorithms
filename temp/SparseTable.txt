class SparseTable {
public:
	vector < vector < int > > st;

	SparseTable(vector < int >& v, int INF) {
		while (1 << MAX_DEG <= v.size())
			MAX_DEG++;
		log_2.resize(v.size() + 1);
		st.resize(MAX_DEG, vector < int >(v.size(), INF));
		for (int i = 0; i < v.size(); i++)
			st[0][i] = v[i];
		int c = 2;
		log_2[1] = 0;
		for (int d = 1; d < MAX_DEG; d++) {
			for (int i = 0; i < v.size(); i++) {
				if (i + (1 << d) - 1 < v.size())
					st[d][i] = max(st[d - 1][i], st[d - 1][i + (1 << d - 1)]);
			}
			for (; c < 1 << d + 1 && c < log_2.size(); c++)
				log_2[c] = d;
		}
	}


	int get_max(int l, int r) {
		int d = log_2[r - l + 1];
		return max(st[d][l], st[d][r - (1 << d) + 1]);
	}

private:
	int MAX_DEG = 0;
	vector < int > log_2;
};