#include <algorithm>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
class DSU
{
public:
	vector < int > p, rk;
 
	DSU(int n)
	{
		p.resize(n);
		for (int i = 0; i < n; i++)
		{
			p[i] = i;
		}
		rk.resize(n, 0);
	}
 
	int get(int v)
	{
		if (p[v] == v)
		{
			return v;
		}
		return p[v] = get(p[v]);
	}
 
	bool join(int u, int v)
	{
		u = get(u);
		v = get(v);
		if (u == v)
		{
			return false;
		}
		if (rk[u] > rk[v])
		{
			swap(u, v);
		}
		p[u] = v;
		rk[v] = max(rk[v], rk[u] + 1);
		return true;
	}
};
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cout.precision(15);
	int n, m, l;
 
	cin >> n >> m >> l;
 
	int time = 0;
	vector < bool > op(n, false);
	vector < long long > a(n);
	DSU dsu(n);
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
		if (a[i] > l)
		{
			op[i] = true;
			if (i > 0 && op[i - 1] && i < n - 1 && op[i + 1])
			{
				dsu.join(i, i - 1);
				dsu.join(i, i + 1);
				time--;
			}
			else if (i > 0 && op[i - 1])
			{
				dsu.join(i, i - 1);
			}
			else if (i < n - 1 && op[i + 1])
			{
				dsu.join(i, i + 1);
			}
			else
			{
				time++;
			}
		}
	}
 
	for (int i = 0; i < m; i++)
	{
		int flag;
		cin >> flag;
 
		if (flag)
		{
			int p, d;
			cin >> p >> d;
			p--;
 
			a[p] += d;
			if (!op[p] && a[p] > l)
			{
				op[p] = true;
				if (p > 0 && op[p - 1] && p < n - 1 && op[p + 1])
				{
					dsu.join(p, p - 1);
					dsu.join(p, p + 1);
					time--;
				}
				else if (p > 0 && op[p - 1])
				{
					dsu.join(p, p - 1);
				}
				else if (p < n - 1 && op[p + 1])
				{
					dsu.join(p, p + 1);
				}
				else
				{
					time++;
				}
			}
		}
		else
		{
			cout << time << endl;
		}
	}
 
	return 0;
}