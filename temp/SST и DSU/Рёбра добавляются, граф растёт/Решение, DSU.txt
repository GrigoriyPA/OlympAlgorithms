#include <algorithm>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
class DSU
{
public:
	vector < int > p, rk, cnt;
 
	DSU(int n)
	{
		p.resize(n);
		for (int i = 0; i < n; i++)
		{
			p[i] = i;
		}
		rk.resize(n, 0);
		cnt.resize(n, 0);
	}
 
	int get(int v)
	{
		if (p[v] == v)
		{
			return v;
		}
		return get(p[v]);
	}
 
	int get_cnt(int v)
	{
		if (p[v] == v)
		{
			return 0;
		}
		return (cnt[v] + get_cnt(p[v])) % 2;
	}
 
	bool join(int u, int v)
	{
		int pu = get(u), pv = get(v);
		
		if (pu == pv)
		{
			if ((get_cnt(u) + get_cnt(v)) % 2 == 1)
			{
				return true;
			}
			return false;
		}
 
		if (rk[pu] > rk[pv])
		{
			swap(u, v);
			swap(pu, pv);
		}
		rk[pv] = max(rk[pv], rk[pu] + 1);
 
		cnt[pu] = (get_cnt(u) + get_cnt(v) + 1) % 2;
		p[pu] = pv;
 
		return true;
	}
};
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cout.precision(15);
	int n, m;
 
	cin >> n >> m;
 
	DSU dsu(n);
	bool dd = true;
	vector < int > ans;
	for (int i = 0; i < m; i++)
	{
		int x, y;
		cin >> x >> y;
		x--;
		y--;
 
		dd = dd && dsu.join(x, y);
		ans.push_back(int(dd));
	}
 
	for (int el : ans)
	{
		cout << el;
	}
	cout << endl;
 
	return 0;
}