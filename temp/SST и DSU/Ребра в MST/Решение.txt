#include <algorithm>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
struct edge
{
	int s, e, w, id;
 
	edge(int s = -1, int e = -1, int w = -1, int id = -1)
	{
		this->s = s;
		this->e = e;
		this->w = w;
		this->id = id;
	}
 
	bool operator <(edge other)
	{
		return w < other.w;
	}
};
 
 
struct edge_bridges
{
	int to, id;
 
	edge_bridges(int to = -1, int id = -1)
	{
		this->to = to;
		this->id = id;
	}
};
 
 
class DSU
{
public:
	vector < int > p, rk;
 
	DSU(int n)
	{
		p.resize(n);
		for (int i = 0; i < n; i++)
		{
			p[i] = i;
		}
		rk.resize(n, 0);
	}
 
	int get(int v)
	{
		if (p[v] == v)
		{
			return v;
		}
		return p[v] = get(p[v]);
	}
 
	bool join(int u, int v)
	{
		u = get(u);
		v = get(v);
		if (u == v)
		{
			return false;
		}
		if (rk[u] > rk[v])
		{
			swap(u, v);
		}
		p[u] = v;
		rk[v] = max(rk[v], rk[u] + 1);
		return true;
	}
};
 
 
vector < vector < edge_bridges > > g;
vector < bool > used, bridge;
vector < int > tin, up;
int timer = 0;
 
 
void dfs(int v, int pid)
{
	tin[v] = timer;
	timer++;
 
	up[v] = tin[v];
 
	used[v] = true;
 
	for (edge_bridges r : g[v])
	{
		if (!used[r.to])
		{
			dfs(r.to, r.id);
 
			if (up[r.to] == tin[r.to])
			{
				bridge[r.id] = true;
			}
			else
			{
				up[v] = min(up[v], up[r.to]);
			}
		}
		else if (r.id != pid)
		{
			up[v] = min(up[v], tin[r.to]);
		}
	}
}
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cout.precision(15);
	int n, m;
 
	cin >> n >> m;
 
	vector < edge > edges(m);
	for (int i = 0; i < m; i++)
	{
		cin >> edges[i].s >> edges[i].e >> edges[i].w;
		edges[i].s--;
		edges[i].e--;
		edges[i].id = i;
	}
	sort(edges.begin(), edges.end());
 
	DSU dsu(n);
	vector < string > types(m);
	for (int i = 0; i < m; i++)
	{
		vector < edge > temp_eds;
		vector < int > coor_comp;
		int j = i;
		for (; j < m && edges[j].w == edges[i].w; j++)
		{
			int u = dsu.get(edges[j].s), v = dsu.get(edges[j].e);
			if (u == v)
			{
				types[edges[j].id] = "none";
			}
			else
			{
				temp_eds.push_back(edge(u, v, edges[j].w, edges[j].id));
				coor_comp.push_back(u);
				coor_comp.push_back(v);
			}
		}
 
		sort(coor_comp.begin(), coor_comp.end());
		int cnt = coor_comp.size();
 
		g.clear();
		g.resize(cnt);
		for (edge ed : temp_eds)
		{
			int v = lower_bound(coor_comp.begin(), coor_comp.end(), ed.s) - coor_comp.begin();
			int u = lower_bound(coor_comp.begin(), coor_comp.end(), ed.e) - coor_comp.begin();
			g[u].push_back(edge_bridges(v, ed.id));
			g[v].push_back(edge_bridges(u, ed.id));
		}
 
		used.resize(cnt, false);
		tin.resize(cnt);
		up.resize(cnt);
		bridge.resize(m, false);
		for (int k = 0; k < cnt; k++)
		{
			if (!used[k])
			{
				dfs(k, -1);
			}
		}
 
		for (edge ed : temp_eds)
		{
			if (bridge[ed.id])
			{
				types[ed.id] = "any";
			}
			else
			{
				types[ed.id] = "at least one";
			}
			dsu.join(ed.s, ed.e);
		}
 
		i = j - 1;
 
		timer = 0;
		used.clear();
		tin.clear();
		up.clear();
		bridge.clear();
	}
 
	for (string el : types)
	{
		cout << el << endl;
	}
 
	return 0;
}