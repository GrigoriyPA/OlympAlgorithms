#include <algorithm>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
struct pt
{
	int x, y, id;
 
	pt()
	{
	}
 
	pt(int x, int y, int id)
	{
		this->x = x;
		this->y = y;
		this->id = id;
	}
 
	int dist(pt other)
	{
		return (x - other.x) * (x - other.x) + (y - other.y) * (y - other.y);
	}
};
 
 
vector < int > dijkstra(int s, vector < pt >& g)
{
	const int INF = 1e9;
 
	vector < int > d(g.size(), INF);
	d[s] = 0;
 
	vector < bool > used(g.size(), false);
 
	for (int k = 0; k < g.size(); k++)
	{
		int v = -1;
		for (int i = 0; i < g.size(); i++)
		{
			if (!used[i] && (v == -1 || d[v] > d[i]))
			{
				v = i;
			}
		}
 
		used[v] = true;
		if (d[v] == INF)
		{
			break;
		}
 
		for (pt P : g)
		{
			if (!used[P.id] && d[P.id] > P.dist(g[v]))
			{
				d[P.id] = P.dist(g[v]);
			}
		}
	}
 
	return d;
}
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cout.precision(15);
	int n;
 
	cin >> n;
 
	vector < pt > g(n);
	for (int i = 0; i < n; i++)
	{
		cin >> g[i].x >> g[i].y;
		g[i].id = i;
	}
 
	vector < int > d = dijkstra(0, g);
 
	long double l = 0;
	for (int el : d)
	{
		l += sqrt(el);
	}
 
	cout << l << endl;
 
	return 0;
}