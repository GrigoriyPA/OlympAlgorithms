#include <algorithm>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
class DSU
{
public:
	vector < int > p, exp;
 
	DSU(int n)
	{
		p.resize(n);
		for (int i = 0; i < n; i++)
		{
			p[i] = i;
		}
		exp.resize(n, 0);
	}
 
	pair < int, int > get(int v)
	{
		if (p[v] == v)
		{
			return make_pair(v, 0);
		}
		pair < int, int > res = get(p[v]);
		p[v] = res.first;
		exp[v] += res.second;
		return make_pair(p[v], exp[v]);
	}
 
	int get_exp(int v)
	{
		pair < int, int > res = get(v);
		return res.second + exp[res.first];
	}
 
	void add(int v, int value)
	{
		v = get(v).first;
		exp[v] += value;
	}
 
	bool join(int u, int v)
	{
		u = get(u).first;
		v = get(v).first;
		if (u == v)
		{
			return false;
		}
 
		p.push_back(p.size());
		exp.push_back(0);
 
		p[u] = p.size() - 1;
		p[v] = p.size() - 1;
 
		return true;
	}
};
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cout.precision(15);
	int n, m;
 
	cin >> n >> m;
 
	DSU dsu(n);
	for (int i = 0; i < m; i++)
	{
		string operation;
		int x;
		cin >> operation >> x;
		x--;
 
		if (operation == "join")
		{
			int y;
			cin >> y;
			y--;
 
			dsu.join(x, y);
		}
		else if (operation == "add")
		{
			int v;
			cin >> v;
 
			dsu.add(x, v);
		}
		else
		{
			cout << dsu.get_exp(x) << endl;
		}
	}
 
	return 0;
}