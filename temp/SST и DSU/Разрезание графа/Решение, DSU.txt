#include <algorithm>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
struct edge
{
	int s, e, w;
 
	bool operator <(edge other)
	{
		return w < other.w;
	}
};
 
 
struct request
{
	string type;
	int x, y;
};
 
 
class DSU
{
public:
	vector < int > p, rk;
 
	DSU(int n)
	{
		p.resize(n);
		for (int i = 0; i < n; i++)
		{
			p[i] = i;
		}
		rk.resize(n, 0);
	}
 
	int get(int v)
	{
		if (p[v] == v)
		{
			return v;
		}
		return p[v] = get(p[v]);
	}
 
	bool join(int u, int v)
	{
		u = get(u);
		v = get(v);
		if (u == v)
		{
			return false;
		}
		if (rk[u] > rk[v])
		{
			swap(u, v);
		}
		p[u] = v;
		rk[v] = max(rk[v], rk[u] + 1);
		return true;
	}
};
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cout.precision(15);
	int n, m, k;
 
	cin >> n >> m >> k;
 
	vector < edge > edges(m);
	for (int i = 0; i < m; i++)
	{
		cin >> edges[i].s >> edges[i].e;
		edges[i].s--;
		edges[i].e--;
	}
 
	vector < request > q(k);
	for (int i = 0; i < k; i++)
	{
		cin >> q[i].type >> q[i].x >> q[i].y;
		q[i].x--;
		q[i].y--;
	}
	reverse(q.begin(), q.end());
 
	vector < string > ans;
	DSU dsu(n);
	for (request rq : q)
	{
		if (rq.type == "ask")
		{
			if (dsu.get(rq.x) == dsu.get(rq.y))
			{
				ans.push_back("YES");
			}
			else
			{
				ans.push_back("NO");
			}
		}
		else
		{
			dsu.join(rq.x, rq.y);
		}
	}
 
	for (int i = ans.size() - 1; i >= 0; i--)
	{
		cout << ans[i] << endl;
	}
 
	return 0;
}