#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
const long long INF = 1000000000;
 
 
struct dist
{
	int s, l;
 
	dist(int s, int l)
	{
		this->s = s;
		this->l = l;
	}
};
 
 
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	int n, m, a, b, t, nl = 0;
 
	cin >> n >> m;
 
	vector < vector < int > > gs(n);
	vector < vector < int > > gl(n);
	for (int i = 0; i < m; i++)
	{
		cin >> a >> b >> t;
 
		if (t == 1)
		{
			gs[b - 1].push_back(a - 1);
		}
		else
		{
			gl[b - 1].push_back(a - 1);
		}
	}
 
	vector < dist > d(n, dist(INF, INF));
	d[n - 1] = dist(0, 0);
 
	queue < int > qs;
	queue < int > ql;
	qs.push(n - 1);
	ql.push(n - 1);
 
	int cnt = 0;
	while (!(qs.empty() && ql.empty()))
	{
		if (!qs.empty())
		{
			for (int c : gl[qs.front()])
			{
				if (d[c].l == INF)
				{
					d[c].l = d[qs.front()].s + 1;
					ql.push(c);
				}
			}
			qs.pop();
		}
		if (!ql.empty())
		{
			for (int c : gs[ql.front()])
			{
				if (d[c].s == INF)
				{
					d[c].s = d[ql.front()].l + 1;
					qs.push(c);
				}
			}
			ql.pop();
		}
	}
 
	for (int i = 0; i < n - 1; i++)
	{
		if (d[i].s == INF && d[i].l == INF)
		{
			cout << -1 << " ";
		}
		else
		{
			cout << min(d[i].s, d[i].l) << " ";
		}
	}
	cout << endl;
 
	return 0;
}