#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;
 
 
struct state
{
	int x1, y1, x2, y2;
 
	state(int x1, int y1, int x2, int y2)
	{
		this->x1 = x1;
		this->y1 = y1;
		this->x2 = x2;
		this->y2 = y2;
	}
 
	bool operator <(state other) const
	{
		return x1 < other.x1 || x1 == other.x1 && y1 < other.y1 || x1 == other.x1 && y1 == other.y1 && x2 < other.x2 || x1 == other.x1 && y1 == other.y1 && x2 == other.x2 && y2 < other.y2;
	}
};
 
 
bool inside(state h)
{
	return h.x1 > 0 && h.x1 < 9 && h.x2 > 0 && h.x2 < 9 && h.y1 > 0 && h.y1 < 9 && h.y2 > 0 && h.y2 < 9;
}
 
 
int main()
{
	int y1, y2;
	char x1, x2, sp;
 
	cin >> x1 >> y1 >> x2 >> y2;
 
	vector < int > dx = {1, 2, 2, 1, -1, -2, -2, -1};
	vector < int > dy = {2, 1, -1, -2, -2, -1, 1, 2};
 
	state h(x1 - 'a' + 1, y1, x2 - 'a' + 1, y2);
	map < state, int > p;
	p[h] = 0;
 
	queue < state > q;
	q.push(h);
 
	while (!q.empty())
	{
		for (int i = 0; i < dx.size(); i++)
		{
			for (int j = 0; j < dx.size(); j++)
			{
				h = q.front();
				state hn(h.x1 + dx[i], h.y1 + dy[i], h.x2 + dx[j], h.y2 + dy[j]);
 
				if (inside(hn) && p.find(hn) == p.end())
				{
					q.push(hn);
					p[hn] = p[h] + 1;
				}
			}
		}
 
		q.pop();
	}
 
	int pl = -1;
	for (int i = 1; i < 9; i++)
	{
		for (int j = 1; j < 9; j++)
		{
			h = state(i, j, i, j);
			if (p.find(h) != p.end() && (pl == -1 || pl > p[h]))
			{
				pl = p[h];
			}
		}
	}
 
	cout << pl << endl;
 
	return 0;
}