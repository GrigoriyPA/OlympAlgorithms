#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;
 
 
int transformation(int x, int id)
{
	if (id == 0) // +1000
	{
		if (x > 8999)
		{
			return -1;
		}
		return x + 1000;
	}
	if (id == 1) // -1
	{
		if (x % 10 == 1)
		{
			return -1;
		}
		return x - 1;
	}
	if (id == 2) // >> 1
	{
		return (x % 10) * 1000 + x / 10;
	}
	if (id == 3) // << 1
	{
		return (x % 1000) * 10 + x / 1000;
	}
}
 
 
int main()
{
	int s, e;
 
	cin >> s >> e;
 
	map < int, int > p;
	p[s] = -1;
 
	queue < int > q;
	q.push(s);
 
	while (!q.empty())
	{
		for (int i = 0; i < 4; i++)
		{
			int xn = transformation(q.front(), i);
 
			if (xn != -1 && p.find(xn) == p.end())
			{
				q.push(xn);
				p[xn] = q.front();
			}
		}
 
		q.pop();
	}
 
	vector < int > path(1, e);
	while (p[path.back()] != -1)
	{
		path.push_back(p[path.back()]);
	}
 
	for (int i = path.size() - 1; i >= 0; i--)
	{
		cout << path[i] << endl;
	}
 
	return 0;
}