#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
struct pt
{
	int x, y;
	char flag;
 
	pt(int x = -1, int y = -1, char flag = 'n')
	{
		this->x = x;
		this->y = y;
		this->flag = flag;
	}
};
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	int n, m;
	char f;
 
	cin >> n >> m;
 
	vector < vector < bool > > c(n);
	vector < vector < int > > dh(n);
	vector < vector < int > > dv(n);
	for (int i = 0; i < n; i++)
	{
		dh[i].resize(m, -1);
		dv[i].resize(m, -1);
		c[i].resize(m, false);
		for (int j = 0; j < m; j++)
		{
			cin >> f;
			if (f == '#')
			{
				c[i][j] = true;
			}
		}
	}
 
	dh[0][0] = 0;
 
	deque < pt > q;
	q.push_back(pt(0, 0, 'h'));
 
	while (!q.empty())
	{
		pt v = q.front();
		q.pop_front();
 
		if (v.flag == 'h')
		{
			if (v.y > 0 && dh[v.x][v.y - 1] == -1)
			{
				q.push_front(pt(v.x, v.y - 1, 'h'));
				dh[v.x][v.y - 1] = dh[v.x][v.y];
			}
			if (v.y < m - 1 && dh[v.x][v.y + 1] == -1)
			{
				q.push_front(pt(v.x, v.y + 1, 'h'));
				dh[v.x][v.y + 1] = dh[v.x][v.y];
			}
			if (c[v.x][v.y] && dv[v.x][v.y] == -1)
			{
				q.push_back(pt(v.x, v.y, 'v'));
				dv[v.x][v.y] = dh[v.x][v.y] + 1;
			}
		}
		else
		{
			if (v.x > 0 && dv[v.x - 1][v.y] == -1)
			{
				q.push_front(pt(v.x - 1, v.y, 'v'));
				dv[v.x - 1][v.y] = dv[v.x][v.y];
			}
			if (v.x < n - 1 && dv[v.x + 1][v.y] == -1)
			{
				q.push_front(pt(v.x + 1, v.y, 'v'));
				dv[v.x + 1][v.y] = dv[v.x][v.y];
			}
			if (c[v.x][v.y] && dh[v.x][v.y] == -1)
			{
				q.push_back(pt(v.x, v.y, 'h'));
				dh[v.x][v.y] = dv[v.x][v.y] + 1;
			}
		}
	}
 
	cout << dh[n - 1][m - 1] << endl;
 
	return 0;
}