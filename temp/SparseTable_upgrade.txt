class SparseTable {
public:
	SparseTable(vector < unsigned int > init, unsigned int INF) {
		this->INF = INF;
		base = init;
		int n = init.size();
		log_2.resize(n + 1, 0);

		for (int i = 1; i <= n; i++) {
			for (; 1 << MAX_DEG + 1 <= i; MAX_DEG++) {}
			log_2[i] = MAX_DEG;
		}

		vector < unsigned int > base_st;
		unsigned int mn = INF;
		for (int i = 0; i < n; i++) {
			if (i % MAX_DEG == 0 && i) {
				base_st.push_back(mn);
				mn = INF;
			}

			mn = min(mn, init[i]);
		}
		base_st.push_back(mn);

		int sz = base_st.size();
		st.resize(log_2[sz] + 1, vector < unsigned int >(sz, INF));
		for (int i = 0; i < sz; i++)
			st[0][i] = base_st[i];

		for (int deg = 1; deg <= log_2[sz]; deg++) {
			for (int i = 0; i + (1 << deg - 1) < sz; i++)
				st[deg][i] = min(st[deg - 1][i], st[deg - 1][i + (1 << deg - 1)]);
		}

		int cur_mask = 0;
		mask.resize(n, 0);
		vector < pair < unsigned int, int > > stack;
		for (int i = 0; i < n; i++) {
			if (i % MAX_DEG == 0) {
				cur_mask = 0;
				stack.clear();
			}

			for (; !stack.empty() && stack.back().first > init[i]; ) {
				cur_mask -= 1 << (stack.back().second % MAX_DEG);
				stack.pop_back();
			}
			
			cur_mask += 1 << (i % MAX_DEG);
			stack.push_back({ init[i], i });
			
			mask[i] = cur_mask;
		}
	}

	inline unsigned int get_min(int l, int r) {
		if (l > r)
			swap(l, r);

		if (l % MAX_DEG + r - l < MAX_DEG) {
			int lt = (l / MAX_DEG) * MAX_DEG;
			l %= MAX_DEG;
			r %= MAX_DEG;
			int mask_rq = ((1 << r + 1) - (1 << l)) & mask[lt + r];
			return base[log_2[mask_rq & (-mask_rq)] + lt];
		}

		int l_st = l / MAX_DEG + 1, r_st = r / MAX_DEG - 1;
		unsigned int res = INF;
		if (l_st <= r_st) {
			int deg = log_2[r_st - l_st + 1];
			res = min(st[deg][l_st], st[deg][r_st - (1 << deg) + 1]);
		}

		int lt = (l / MAX_DEG) * MAX_DEG;
		l %= MAX_DEG;
		int mask_rq = ((1 << MAX_DEG) - (1 << l)) & mask[lt + MAX_DEG - 1];
		res = min(res, base[log_2[mask_rq & (-mask_rq)] + lt]);

		lt = (r / MAX_DEG) * MAX_DEG;
		r %= MAX_DEG;
		mask_rq = ((1 << r + 1) - 1) & mask[lt + r];
		res = min(res, base[log_2[mask_rq & (-mask_rq)] + lt]);

		return res;
	}

private:
	vector < vector < unsigned int > > st;
	vector < unsigned int > log_2, mask, base;
	unsigned int MAX_DEG = 0, INF;
};