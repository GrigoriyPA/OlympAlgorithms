struct Node {
	Node* l = nullptr, * r = nullptr;
	int k, p, sz;

	Node() {

	}

	Node(int key, int prior) {
		k = key;
		p = prior;
		sz = 1;
	}
};


class DTree {
public:
	DTree() {

	}

	void insert(int value) {
		T = Insert(T, value, rand());
	}

	void erase(int value) {
		T = Erase(T, value);
	}

	int search(int index) {
		return Search(T, index);
	}

private:
	Node* T = nullptr;


	int get_size(Node* T) {
		if (T == nullptr)
			return 0;
		return T->sz;
	}


	pair < Node*, Node* > Split(Node* T, int k) {
		if (T == nullptr)
			return { nullptr, nullptr };
		if (T->k > k) {
			pair < Node*, Node* > res = Split(T->l, k);
			T->l = res.second;
			if (res.first != nullptr)
				res.first->sz = get_size(res.first->l) + get_size(res.first->r) + 1;
			if (T != nullptr)
				T->sz = get_size(T->l) + get_size(T->r) + 1;
			return { res.first, T };
		}
		else {
			pair < Node*, Node* > res = Split(T->r, k);
			T->r = res.first;
			if (T != nullptr)
				T->sz = get_size(T->l) + get_size(T->r) + 1;
			if (res.second != nullptr)
				res.second->sz = get_size(res.second->l) + get_size(res.second->r) + 1;
			return { T, res.second };
		}
	}


	Node* Merge(Node* T1, Node* T2) {
		if (T1 == nullptr)
			return T2;
		if (T2 == nullptr)
			return T1;
		if (T1->p > T2->p) {
			T1->r = Merge(T1->r, T2);
			T1->sz = get_size(T1->l) + get_size(T1->r) + 1;
			return T1;
		}
		else {
			T2->l = Merge(T1, T2->l);
			T2->sz = get_size(T2->l) + get_size(T2->r) + 1;
			return T2;
		}
	}


	Node* Insert(Node* T, int k, int p) {
		if (T == nullptr) {
			T = new Node(k, p);
			return T;
		}
		if (T->k == k)
			return T;
		if (T->p < p) {
			pair < Node*, Node* > LR = Split(T, k);
			T = new Node(k, p);
			T->l = LR.first;
			T->r = LR.second;
			T->sz = get_size(T->l) + get_size(T->r) + 1;
			return T;
		}
		if (T->k > k)
			T->l = Insert(T->l, k, p);
		else
			T->r = Insert(T->r, k, p);
		T->sz = get_size(T->l) + get_size(T->r) + 1;
		return T;
	}


	Node* Erase(Node* T, int k) {
		if (T == nullptr)
			return T;
		if (T->k == k) {
			T = Merge(T->l, T->r);
			T->sz = get_size(T->l) + get_size(T->r) + 1;
			return T;
		}
		if (T->k > k)
			T->l = Erase(T->l, k);
		else
			T->r = Erase(T->r, k);
		T->sz = get_size(T->l) + get_size(T->r) + 1;
		return T;
	}


	int Search(Node* T, int k) {
		if (T == nullptr)
			return -1;
		if (get_size(T->l) == k - 1)
			return T->k;
		if (get_size(T->l) >= k)
			return Search(T->l, k);
		else
			return Search(T->r, k - get_size(T->l) - 1);
	}
};