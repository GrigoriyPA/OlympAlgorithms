struct Node_HK {
	Node_HK* l = nullptr, * r = nullptr;
	int v, p, sz;

	Node_HK() {

	}

	Node_HK(int val, int prior) {
		v = val;
		p = prior;
		sz = 1;
	}
};


class DTree_HK {
public:
	DTree_HK() {
		gen.seed(1);
	}

	void insert(int index, int val) {
		T = Insert(T, index, val, gen(), 0);
	}

	void erase(int index) {
		T = Erase(T, index, 0);
	}

	int move(int index_left, int index_right, int delt) {
		pair < Node_HK*, Node_HK* > ft = Split(T, index_left, 0);
		pair < Node_HK*, Node_HK* > sd = Split(ft.second, index_right + 1, get_size(ft.first));
		if (index_right + delt > get_size(T) - 1 || index_left + delt < 0) {
			T = Merge(ft.first, sd.second);
			return -(index_right - index_left + 1);
		}
		else {
			Node_HK* temp1 = Merge(ft.first, sd.second);
			pair < Node_HK*, Node_HK* > fd = Split(temp1, index_left + delt, 0);
			Node_HK* temp2 = Merge(fd.first, sd.first);
			T = Merge(temp2, fd.second);
			return 0;
		}
	}

	int operator [](int index) {
		return Search(T, index, 0);
	}

private:
	Node_HK* T = nullptr;
	mt19937 gen;


	int get_size(Node_HK* T) {
		if (T == nullptr)
			return 0;
		return T->sz;
	}


	pair < Node_HK*, Node_HK* > Split(Node_HK* T, int k, int cur) {
		if (T == nullptr)
			return { nullptr, nullptr };
		int cur_key = cur + get_size(T->l);
		if (cur_key >= k) {
			pair < Node_HK*, Node_HK* > res = Split(T->l, k, cur);
			T->l = res.second;
			if (res.first != nullptr)
				res.first->sz = get_size(res.first->l) + get_size(res.first->r) + 1;
			T->sz = get_size(T->l) + get_size(T->r) + 1;
			return { res.first, T };
		}
		else {
			pair < Node_HK*, Node_HK* > res = Split(T->r, k, cur_key + 1);
			T->r = res.first;
			T->sz = get_size(T->l) + get_size(T->r) + 1;
			if (res.second != nullptr)
				res.second->sz = get_size(res.second->l) + get_size(res.second->r) + 1;
			return { T, res.second };
		}
	}


	Node_HK* Merge(Node_HK* T1, Node_HK* T2) {
		if (T1 == nullptr)
			return T2;
		if (T2 == nullptr)
			return T1;
		if (T1->p > T2->p) {
			T1->r = Merge(T1->r, T2);
			T1->sz = get_size(T1->l) + get_size(T1->r) + 1;
			return T1;
		}
		else {
			T2->l = Merge(T1, T2->l);
			T2->sz = get_size(T2->l) + get_size(T2->r) + 1;
			return T2;
		}
	}


	Node_HK* Insert(Node_HK* T, int k, int v, int p, int cur) {
		if (T == nullptr) {
			T = new Node_HK(v, p);
			return T;
		}
		int cur_key = cur + get_size(T->l);
		if (T->p < p) {
			pair < Node_HK*, Node_HK* > LR = Split(T, k, cur);
			T = new Node_HK(v, p);
			T->l = LR.first;
			T->r = LR.second;
			T->sz = get_size(T->l) + get_size(T->r) + 1;
			return T;
		}
		if (cur_key >= k)
			T->l = Insert(T->l, k, v, p, cur);
		else
			T->r = Insert(T->r, k, v, p, cur_key + 1);
		T->sz = get_size(T->l) + get_size(T->r) + 1;
		return T;
	}


	Node_HK* Erase(Node_HK* T, int k, int cur) {
		if (T == nullptr)
			return T;
		int cur_key = cur + get_size(T->l);
		if (cur_key == k) {
			T = Merge(T->l, T->r);
			if (T != nullptr)
				T->sz = get_size(T->l) + get_size(T->r) + 1;
			return T;
		}
		if (cur_key > k)
			T->l = Erase(T->l, k, cur);
		else
			T->r = Erase(T->r, k, cur_key + 1);
		T->sz = get_size(T->l) + get_size(T->r) + 1;
		return T;
	}


	int Search(Node_HK* T, int k, int cur) {
		if (T == nullptr)
			return -1;
		int cur_key = cur + get_size(T->l);
		if (cur_key == k)
			return T->v;
		if (cur_key > k)
			return Search(T->l, k, cur);
		else
			return Search(T->r, k, cur_key + 1);
	}
};