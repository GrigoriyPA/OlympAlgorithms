#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
 
 
int main()
{
    int n, m;
    
    cin >> n >> m;
 
    vector < int > w(n);
    for (int i = 0; i < n; i++)
    {
        cin >> w[i];
    }
    vector < int > p(n);
    for (int i = 0; i < n; i++)
    {
        cin >> p[i];
    }
 
    vector < vector < int > > dp(n + 1);
    for (int i = 0; i <= n; i++)
    {
        dp[i].resize(m + 1, -1);
    }
 
    int a = 0;
    pair < int, int > ac(0, 0);
    dp[0][0] = 0;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 0; j <= m; j++)
        {
            dp[i][j] = dp[i - 1][j];
            if (j - w[i - 1] >= 0 && dp[i - 1][j - w[i - 1]] >= 0 && dp[i - 1][j] < dp[i - 1][j - w[i - 1]] + p[i - 1])
            {
                dp[i][j] = dp[i - 1][j - w[i - 1]] + p[i - 1];
            }
            if (dp[i][j] > a)
            {
                a = dp[i][j];
                ac.first = i;
                ac.second = j;
            }
        }
    }
    /*
    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= m; j++)
        {
            cout << dp[i][j] << " ";
        }
        cout << endl;
    }
    */
    int i = ac.first, j = ac.second;
    vector < int > ans;
    while (i > 0 && j >= 0)
    {
        if (j - w[i - 1] >= 0 && dp[i - 1][j - w[i - 1]] >= 0 && dp[i - 1][j] < dp[i - 1][j - w[i - 1]] + p[i - 1])
        {
            ans.push_back(i);
            j -= w[i - 1];
            i--;
        }
        else
        {
            i--;
        }
    }
 
    cout << ans.size() << endl;
    for (i = ans.size() - 1; i >= 0; i--)
    {
        cout << ans[i] << " ";
    }
    cout << endl;
 
    return 0;
}