#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;
 
 
struct rib
{
	int to, id;
 
	rib(int to, int id)
	{
		this->to = to;
		this->id = id;
	}
};
 
 
vector < vector < rib > > g;
vector < bool > used;
vector < int > tin, up, bridge;
int timer = 0;
 
 
void dfs(int v, int pid)
{
	tin[v] = timer;
	timer++;
 
	up[v] = tin[v];
 
	used[v] = true;
 
	for (rib r : g[v])
	{
		if (!used[r.to])
		{
			dfs(r.to, r.id);
 
			if (up[r.to] == tin[r.to])
			{
				bridge.push_back(r.id);
			}
			else
			{
				up[v] = min(up[v], up[r.to]);
			}
		}
		else if (r.id != pid)
		{
			up[v] = min(up[v], tin[r.to]);
		}
	}
}
 
 
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	int n, m, b, e;
 
	cin >> n >> m;
 
	g.resize(n);
	for (int i = 0; i < m; i++)
	{
		cin >> b >> e;
 
		g[b - 1].push_back(rib(e - 1, i + 1));
		g[e - 1].push_back(rib(b - 1, i + 1));
	}
 
	used.resize(n, false);
	tin.resize(n);
	up.resize(n);
	for (int i = 0; i < n; i++)
	{
		if (!used[i])
		{
			dfs(i, -1);
		}
	}
 
	sort(bridge.begin(), bridge.end());
 
	cout << bridge.size() << endl;
	for (int el : bridge)
	{
		cout << el << " ";
	}
	cout << endl;
 
	return 0;
}